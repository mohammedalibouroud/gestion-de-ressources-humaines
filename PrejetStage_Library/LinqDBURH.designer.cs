#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PrejetStage_Library
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Bd_Projet")]
	public partial class LinqDBURHDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGrade(Grade instance);
    partial void UpdateGrade(Grade instance);
    partial void DeleteGrade(Grade instance);
    partial void InsertCadre(Cadre instance);
    partial void UpdateCadre(Cadre instance);
    partial void DeleteCadre(Cadre instance);
    partial void InsertSpecialite(Specialite instance);
    partial void UpdateSpecialite(Specialite instance);
    partial void DeleteSpecialite(Specialite instance);
    #endregion
		
		public LinqDBURHDataContext() : 
				base(global::PrejetStage_Library.Properties.Settings.Default.Bd_ProjetConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDBURHDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDBURHDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDBURHDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDBURHDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Grade> Grades
		{
			get
			{
				return this.GetTable<Grade>();
			}
		}
		
		public System.Data.Linq.Table<Cadre> Cadres
		{
			get
			{
				return this.GetTable<Cadre>();
			}
		}
		
		public System.Data.Linq.Table<Specialite> Specialites
		{
			get
			{
				return this.GetTable<Specialite>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Grade")]
	public partial class Grade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CodeGrade;
		
		private string _LibelleGradeFr;
		
		private string _LibelleGradeAr;
		
		private System.Nullable<int> _Cadre;
		
		private System.Nullable<int> _NumeroCadreClassement;
		
		private EntityRef<Cadre> _Cadre1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeGradeChanging(int value);
    partial void OnCodeGradeChanged();
    partial void OnLibelleGradeFrChanging(string value);
    partial void OnLibelleGradeFrChanged();
    partial void OnLibelleGradeArChanging(string value);
    partial void OnLibelleGradeArChanged();
    partial void OnCadreChanging(System.Nullable<int> value);
    partial void OnCadreChanged();
    partial void OnNumeroCadreClassementChanging(System.Nullable<int> value);
    partial void OnNumeroCadreClassementChanged();
    #endregion
		
		public Grade()
		{
			this._Cadre1 = default(EntityRef<Cadre>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodeGrade", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CodeGrade
		{
			get
			{
				return this._CodeGrade;
			}
			set
			{
				if ((this._CodeGrade != value))
				{
					this.OnCodeGradeChanging(value);
					this.SendPropertyChanging();
					this._CodeGrade = value;
					this.SendPropertyChanged("CodeGrade");
					this.OnCodeGradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LibelleGradeFr", DbType="VarChar(250)")]
		public string LibelleGradeFr
		{
			get
			{
				return this._LibelleGradeFr;
			}
			set
			{
				if ((this._LibelleGradeFr != value))
				{
					this.OnLibelleGradeFrChanging(value);
					this.SendPropertyChanging();
					this._LibelleGradeFr = value;
					this.SendPropertyChanged("LibelleGradeFr");
					this.OnLibelleGradeFrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LibelleGradeAr", DbType="NVarChar(250)")]
		public string LibelleGradeAr
		{
			get
			{
				return this._LibelleGradeAr;
			}
			set
			{
				if ((this._LibelleGradeAr != value))
				{
					this.OnLibelleGradeArChanging(value);
					this.SendPropertyChanging();
					this._LibelleGradeAr = value;
					this.SendPropertyChanged("LibelleGradeAr");
					this.OnLibelleGradeArChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cadre", DbType="Int")]
		public System.Nullable<int> Cadre
		{
			get
			{
				return this._Cadre;
			}
			set
			{
				if ((this._Cadre != value))
				{
					if (this._Cadre1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCadreChanging(value);
					this.SendPropertyChanging();
					this._Cadre = value;
					this.SendPropertyChanged("Cadre");
					this.OnCadreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumeroCadreClassement", DbType="Int")]
		public System.Nullable<int> NumeroCadreClassement
		{
			get
			{
				return this._NumeroCadreClassement;
			}
			set
			{
				if ((this._NumeroCadreClassement != value))
				{
					this.OnNumeroCadreClassementChanging(value);
					this.SendPropertyChanging();
					this._NumeroCadreClassement = value;
					this.SendPropertyChanged("NumeroCadreClassement");
					this.OnNumeroCadreClassementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cadre_Grade", Storage="_Cadre1", ThisKey="Cadre", OtherKey="IDCadre", IsForeignKey=true)]
		public Cadre Cadre1
		{
			get
			{
				return this._Cadre1.Entity;
			}
			set
			{
				Cadre previousValue = this._Cadre1.Entity;
				if (((previousValue != value) 
							|| (this._Cadre1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cadre1.Entity = null;
						previousValue.Grades.Remove(this);
					}
					this._Cadre1.Entity = value;
					if ((value != null))
					{
						value.Grades.Add(this);
						this._Cadre = value.IDCadre;
					}
					else
					{
						this._Cadre = default(Nullable<int>);
					}
					this.SendPropertyChanged("Cadre1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cadre")]
	public partial class Cadre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDCadre;
		
		private string _CadreAr;
		
		private string _CadreFR;
		
		private EntitySet<Grade> _Grades;
		
		private EntitySet<Specialite> _Specialites;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDCadreChanging(int value);
    partial void OnIDCadreChanged();
    partial void OnCadreArChanging(string value);
    partial void OnCadreArChanged();
    partial void OnCadreFRChanging(string value);
    partial void OnCadreFRChanged();
    #endregion
		
		public Cadre()
		{
			this._Grades = new EntitySet<Grade>(new Action<Grade>(this.attach_Grades), new Action<Grade>(this.detach_Grades));
			this._Specialites = new EntitySet<Specialite>(new Action<Specialite>(this.attach_Specialites), new Action<Specialite>(this.detach_Specialites));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCadre", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDCadre
		{
			get
			{
				return this._IDCadre;
			}
			set
			{
				if ((this._IDCadre != value))
				{
					this.OnIDCadreChanging(value);
					this.SendPropertyChanging();
					this._IDCadre = value;
					this.SendPropertyChanged("IDCadre");
					this.OnIDCadreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CadreAr", DbType="NVarChar(150)")]
		public string CadreAr
		{
			get
			{
				return this._CadreAr;
			}
			set
			{
				if ((this._CadreAr != value))
				{
					this.OnCadreArChanging(value);
					this.SendPropertyChanging();
					this._CadreAr = value;
					this.SendPropertyChanged("CadreAr");
					this.OnCadreArChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CadreFR", DbType="VarChar(50)")]
		public string CadreFR
		{
			get
			{
				return this._CadreFR;
			}
			set
			{
				if ((this._CadreFR != value))
				{
					this.OnCadreFRChanging(value);
					this.SendPropertyChanging();
					this._CadreFR = value;
					this.SendPropertyChanged("CadreFR");
					this.OnCadreFRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cadre_Grade", Storage="_Grades", ThisKey="IDCadre", OtherKey="Cadre")]
		public EntitySet<Grade> Grades
		{
			get
			{
				return this._Grades;
			}
			set
			{
				this._Grades.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cadre_Specialite", Storage="_Specialites", ThisKey="IDCadre", OtherKey="Cadre")]
		public EntitySet<Specialite> Specialites
		{
			get
			{
				return this._Specialites;
			}
			set
			{
				this._Specialites.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Grades(Grade entity)
		{
			this.SendPropertyChanging();
			entity.Cadre1 = this;
		}
		
		private void detach_Grades(Grade entity)
		{
			this.SendPropertyChanging();
			entity.Cadre1 = null;
		}
		
		private void attach_Specialites(Specialite entity)
		{
			this.SendPropertyChanging();
			entity.Cadre1 = this;
		}
		
		private void detach_Specialites(Specialite entity)
		{
			this.SendPropertyChanging();
			entity.Cadre1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Specialite")]
	public partial class Specialite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CodeSpecialite;
		
		private string _LibelleSpecialiteFR;
		
		private string _LibelleSpecialiteAR;
		
		private System.Nullable<int> _Cadre;
		
		private System.Nullable<int> _TypePersonnel;
		
		private EntityRef<Cadre> _Cadre1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeSpecialiteChanging(int value);
    partial void OnCodeSpecialiteChanged();
    partial void OnLibelleSpecialiteFRChanging(string value);
    partial void OnLibelleSpecialiteFRChanged();
    partial void OnLibelleSpecialiteARChanging(string value);
    partial void OnLibelleSpecialiteARChanged();
    partial void OnCadreChanging(System.Nullable<int> value);
    partial void OnCadreChanged();
    partial void OnTypePersonnelChanging(System.Nullable<int> value);
    partial void OnTypePersonnelChanged();
    #endregion
		
		public Specialite()
		{
			this._Cadre1 = default(EntityRef<Cadre>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodeSpecialite", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CodeSpecialite
		{
			get
			{
				return this._CodeSpecialite;
			}
			set
			{
				if ((this._CodeSpecialite != value))
				{
					this.OnCodeSpecialiteChanging(value);
					this.SendPropertyChanging();
					this._CodeSpecialite = value;
					this.SendPropertyChanged("CodeSpecialite");
					this.OnCodeSpecialiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LibelleSpecialiteFR", DbType="NVarChar(250)")]
		public string LibelleSpecialiteFR
		{
			get
			{
				return this._LibelleSpecialiteFR;
			}
			set
			{
				if ((this._LibelleSpecialiteFR != value))
				{
					this.OnLibelleSpecialiteFRChanging(value);
					this.SendPropertyChanging();
					this._LibelleSpecialiteFR = value;
					this.SendPropertyChanged("LibelleSpecialiteFR");
					this.OnLibelleSpecialiteFRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LibelleSpecialiteAR", DbType="NVarChar(250)")]
		public string LibelleSpecialiteAR
		{
			get
			{
				return this._LibelleSpecialiteAR;
			}
			set
			{
				if ((this._LibelleSpecialiteAR != value))
				{
					this.OnLibelleSpecialiteARChanging(value);
					this.SendPropertyChanging();
					this._LibelleSpecialiteAR = value;
					this.SendPropertyChanged("LibelleSpecialiteAR");
					this.OnLibelleSpecialiteARChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cadre", DbType="Int")]
		public System.Nullable<int> Cadre
		{
			get
			{
				return this._Cadre;
			}
			set
			{
				if ((this._Cadre != value))
				{
					if (this._Cadre1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCadreChanging(value);
					this.SendPropertyChanging();
					this._Cadre = value;
					this.SendPropertyChanged("Cadre");
					this.OnCadreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypePersonnel", DbType="Int")]
		public System.Nullable<int> TypePersonnel
		{
			get
			{
				return this._TypePersonnel;
			}
			set
			{
				if ((this._TypePersonnel != value))
				{
					this.OnTypePersonnelChanging(value);
					this.SendPropertyChanging();
					this._TypePersonnel = value;
					this.SendPropertyChanged("TypePersonnel");
					this.OnTypePersonnelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cadre_Specialite", Storage="_Cadre1", ThisKey="Cadre", OtherKey="IDCadre", IsForeignKey=true)]
		public Cadre Cadre1
		{
			get
			{
				return this._Cadre1.Entity;
			}
			set
			{
				Cadre previousValue = this._Cadre1.Entity;
				if (((previousValue != value) 
							|| (this._Cadre1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cadre1.Entity = null;
						previousValue.Specialites.Remove(this);
					}
					this._Cadre1.Entity = value;
					if ((value != null))
					{
						value.Specialites.Add(this);
						this._Cadre = value.IDCadre;
					}
					else
					{
						this._Cadre = default(Nullable<int>);
					}
					this.SendPropertyChanged("Cadre1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
